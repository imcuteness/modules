# –ü–û–õ–û–í–ò–ù–ê –ö–û–î–ê –ú–û–ñ–ï–¢ –ë–´–¢–¨ –°–ü–ò–ó–ñ–ï–ù–ê, –ò–ë–û –Ø –ù–ï –°–û–ë–ò–†–ê–Æ–°–¨ –†–ê–°–ü–†–û–°–¢–†–ê–ù–Ø–¢–¨ –≠–¢–û–¢ –ú–û–î–£–õ–¨, –ï–°–õ–ò –û–ù –ö–ê–ö–ò–ú-–¢–û –û–ë–†–ê–ó–û–ú –ü–û–ü–ê–î–ï–¢ –í –ß–£–ñ–ò–ï –†–£–ö–ò - –≠–¢–û –ù–ï –ú–û–Ø –í–ò–ù–ê!!! –ò–ó–í–ò–ù–ò–¢–ï –Ø –ì–û–í–ù–û–ö–û–î–ï–†!!!

from telethon.tl.types import MessageService, MessageActionChatAddUser
from .. import loader, utils
from ..inline.types import InlineCall
import random as r
import time as t
import requests
from typing import Dict
import json
import aiohttp
import asyncio

@loader.tds
class KonataBotMod(loader.Module):
    """–ö–æ–Ω–∞—Ç–∞-–ë–æ—Ç!"""

    strings = {"name": "KonataBot"}


    async def client_ready(self, client, db):
        self._client = client
        self._db = db
        self.db.get("KonataBot", "stars", {}) # –¥–± –¥–ª—è –∑–≤–µ–∑–¥
        self.db.get("KonataBot", "timers", {}) # –¥–± –¥–ª—è —Ç–∞–π–º–µ—Ä–æ–≤
        self.db.get("KonataBot", "nicknames", {}) # –¥–± –¥–ª—è –Ω–∏–∫–æ–≤
        self.db.get("KonataBot", "clans", {}) # –∫–ª–∞–Ω—ã
        self.db.get("KonataBot", "clan_roles", {}) # —Ä–æ–ª–∏
        self.db.get("KonataBot", "boosters", {}) # –±—É—Å—Ç–µ—Ä—ã; –±—É–¥–µ—Ç —Ç–∞–∫: {"—Ñ–∞—Ä–º": –∫–¥}
        self.db.get("KonataBot", "banlist", []) # –±–∞–Ω–ª–∏—Å—Ç!
        self.db.get("KonataBot", "admins", []) # admin list


    async def _activate_booster_confirm(self, call: InlineCall, boost_name: str, uid: int):
        if call.from_user.id != uid:
            await call.answer("üö´ –ù–µ —Ç–≤–æ—è –∫–Ω–æ–ø–∫–∞!", show_alert=True)
            return
        
        boosters = self.db.get("KonataBot", "boosters", {})
        current_time = t.time()
        
        if boost_name in boosters:
            remaining = (boosters[boost_name] + 43200) - current_time
            if remaining > 0:
                await call.edit("‚ùå –≠—Ç–æ—Ç –±—É—Å—Ç–µ—Ä —É–∂–µ –∞–∫—Ç–∏–≤–µ–Ω!")
                return
        
        boosters[boost_name] = current_time
        self.db.set("KonataBot", "boosters", boosters)
        
        await self.change_stars(uid, "take", 500)
        await call.edit(
            f"‚úÖ –ë—É—Å—Ç–µ—Ä <code>{boost_name}</code> –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω –Ω–∞ 12 —á–∞—Å–æ–≤!\n-500 –∑–≤—ë–∑–¥ ‚≠êÔ∏è",
            reply_markup=None
        )

    async def _activate_booster_cancel(self, call: InlineCall, uid: int):
        if call.from_user.id != uid:
            await call.answer("üö´ –ù–µ —Ç–≤–æ—è –∫–Ω–æ–ø–∫–∞!", show_alert=True)
            return
        await call.edit("‚ùå –ê–∫—Ç–∏–≤–∞—Ü–∏—è –±—É—Å—Ç–µ—Ä–∞ –æ—Ç–º–µ–Ω–µ–Ω–∞.", reply_markup=None)

    def _load_values(self) -> Dict[str, str]:
        url = "https://raw.githubusercontent.com/Codwizer/ReModules/main/assets/zakon.json"
        try:
            response = requests.get(url)
            if response.ok:
                data = json.loads(response.text)
                return data
        except (requests.RequestException, json.JSONDecodeError):
            pass
    
    async def _accept_clan(self, call: InlineCall, uid, clan):
        if call.from_user.id != uid:
            await call.answer("–≠—Ç–æ –Ω–µ —Ç–≤–æ—è –∫–Ω–æ–ø–∫–∞, –µ–±–∞–Ω–∞—Ç.", show_alert=True)
            return
        clans = self.db.get("KonataBot", "clans", {})
        clans[clan].append(uid)
        self.db.set("KonataBot", "clans", clans)
        nick = await self.get_nick(uid)
        roles = self.db.get("KonataBot", "clan_roles", {})
        roles[uid] = {clan: "member"}
        self.db.set("KonataBot", "clan_roles", roles)
        await call.edit(f"‚úÖ {nick} —É—Å–ø–µ—à–Ω–æ –≤—Å—Ç—É–ø–∏–ª –≤ –∫–ª–∞–Ω <code>{clan}</code>.")
    
    async def _decline_clan(self, call: InlineCall, uid, nick):
        if call.from_user.id != uid:
            await call.answer("–≠—Ç–æ –Ω–µ —Ç–≤–æ—è –∫–Ω–æ–ø–∫–∞, –¥–∞–ª–±–∞–µ–±.", show_alert=True)
            return
        await call.edit(f"‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {nick} –æ—Ç–∫–∞–∑–∞–ª—Å—è –æ—Ç –≤—Å—Ç—É–ø–ª–µ–Ω–∏—è –≤ –∫–ª–∞–Ω.")
    
    # —Ñ—É–Ω–∫—Ü–∏–∏ –ø–æ–ª–µ–∑–Ω—ã–µ 
    async def get_clan(self, uid):
        clans = self.db.get("KonataBot", "clans", {})
        for clan, members in clans.items():
            if uid in members:
                return clan
            return None
        
    async def change_stars(self, uid: int, action: str, amount: int):
        uid = str(uid)
        stars = self.db.get("KonataBot", "stars", {})

        if action == "add":
            stars[uid] = stars.get(uid, 0) + amount
        elif action == "take":
            if stars.get(uid, 0) >= amount:
                stars[uid] -= amount
            else:
                return False 
        
        self.db.set("KonataBot", "stars", stars)
        return True


    # –∏–∏ —Ñ—É–Ω–∫—Ü–∏—è
    async def ask(self, question, model="gemini"):
        prompt = f"–ü—Ä–∏–≤–µ—Ç, —Ç—ã - —á–∞—Ç –∞—Å—Å–∏—Å—Ç–µ–Ω—Ç, —Ç–≤–æ–π –æ–±—Ä–∞–∑ - –º–∏–ª–∞—è –∞–Ω–∏–º–µ –¥–µ–≤–æ—á–∫–∞ (–ö–æ–Ω–∞—Ç–∞ –ò–∑—É–º–∏ –∏–∑ Lucky Star), —Ç—ã –¥–æ–ª–∂–µ–Ω –æ—Ç–≤–µ—á–∞—Ç—å —Ç–∞–∫. –¢–≤–æ–π –≤–æ–ø—Ä–æ—Å: {question}. –û—Ç–≤–µ—á–∞–π –∫—Ä–∞—Ç–∫–æ, –Ω–æ –ø–æ–Ω—è—Ç–Ω–æ."
        
        async with aiohttp.ClientSession() as session:
            async with session.post('http://api.onlysq.ru/ai/v2', json={"model": model, "request": {"messages": [{"role": "user", "content": prompt}]}}) as res:
                if res.status == 200:
                    data = await res.json()
                    return data.get('answer', '–û—à–∏–±–∫–∞')
                else:
                    return '–û—à–∏–±–∫–∞'
    
    async def get_ping(self):
        start_time = t.time()
        await self.client.get_me()
        end_time = t.time()
        ping = end_time - start_time
        return round(ping * 1000)

    async def get_nick(self, uid):
            nicks = self.db.get("KonataBot", "nicknames", {})
            uid = int(uid)
            nickname = nicks.get(str(uid), None)
            if not nickname: 
                entity = await self.client.get_entity(uid)
                first_name = entity.first_name or "–ù–µ–æ–ø–æ–∑–Ω–∞–Ω–Ω—ã–π –ø–µ—Ä—Å–æ–Ω–∞–∂"
                return(f'<a href="tg://openmessage?user_id={uid}">{first_name}</a>')
            else: 
                return(f'<a href="tg://openmessage?user_id={uid}">{nickname}</a>')
            
    def check_timer(self, uid: int, command: str, cooldown: int):
        uid = str(uid)
        timers = self.db.get("KonataBot", "timers", {})
        current_time = t.time()
        
        last_used = timers.get(uid, {}).get(command, 0)
        
        if current_time - last_used >= cooldown:
            timers.setdefault(uid, {})[command] = current_time
            self.db.set("KonataBot", "timers", timers)
            return None
        
        remaining = cooldown - (current_time - last_used)
        return remaining


    async def clan_create(self, call: InlineCall, uid: int, name: str, message):
        
        # –ø—Ä–æ–≤–µ—Ä–∫–∞ –µ—Å—Ç—å –ª–∏ —É–∂–µ –∫–ª–∞–Ω —Å —Ç–∞–∫–∏–º –Ω–∞–∑–≤–∞–Ω–∏–µ–º
        checkclan = self.db.get("KonataBot", "clans", {})
        # –ø–æ–ª—É—á–∞–µ–º –Ω–∏–∫
        nick = await self.get_nick(uid)
        

         # –∑–∞–±–∏—Ä–∞–∞–µ–º –∑–≤–µ–∑–¥—ã 
        uid = message.sender_id
        take = await self.change_stars(uid, "take", 250)
        if not take:
            await message.reply("‚ùå –£ –≤–∞—Å –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç –∑–≤—ë–∑–¥–æ—á–µ–∫. –í–∞–º –Ω—É–∂–Ω–æ 250 ‚≠êÔ∏è")
            return

        # —Å–æ–∑–¥–∞–µ–º –∫–ª–∞–Ω
        clan = await self.get_clan(uid)
        if clan:
            await call.edit(f"‚ùå –í—ã —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –∫–ª–∞–Ω–µ {clan}")
            await self.change_stars(uid, "add", 250)
            return
        clans = self.db.get("KonataBot", "clans", {})
        clans[name] = [uid]
        self.db.set("KonataBot", "clans", clans)
        

        # –≤—ã–¥–∞–µ–º —Ä–æ–ª—å –æ–≤–Ω–µ—Ä–∞
        roles = self.db.get("KonataBot", "clan_roles", {})
        roles[uid] = {name: "owner"}
        self.db.set("KonataBot", "clan_roles", roles)

        await call.edit(f"‚úÖ {nick}, –≤—ã —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–ª–∏ –∫–ª–∞–Ω <code>{name}</code>\n-250 ‚≠êÔ∏è")
    async def no_create(self, call: InlineCall):
        await call.edit("‚ùå –í—ã —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫–∞–∑–∞–ª–∏—Å—å –æ—Ç —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª–∞–Ω–∞.")

    @loader.watcher()
    async def watcher(self, message):
        banned = self.db.get("KonataBot", "banlist", [])
        if message.sender_id in banned:
            return
        # /admin
        if message.text.lower() == "/admin":
            allowed_ids = [6748174500]
            if message.sender_id not in allowed_ids:
                return
            reply = await message.get_reply_message()
            if not reply:
                return
            admins = self.db.get("KonataBot", "admins", [])
            admins.append(reply.sender_id)
            self.db.set("KonataBot", "admins", admins)
            await message.reply(f"–£—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–∏–ª–∞ –Ω–æ–≤–æ–≥–æ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ {reply.sender_id}")

        # –±–∞–Ω
        if message.text.lower() == "/kban":
            reply = await message.get_reply_message()
            if not reply:
                return
            rid = reply.sender_id
            allowed_ids = self.db.get("KonataBot", "admins", [])
            if message.sender_id not in allowed_ids:
                await message.reply("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤.")
                return
            banned = self.db.get("KonataBot", "banlist", [])
            banned.append(rid)
            self.db.set("KonataBot", "banlist", banned)
            await message.reply(f"–£—Å–ø–µ—à–Ω–æ –∑–∞–±–∞–Ω–∏–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å id {rid}")
        # —Ñ–∞—Ä–º
        if message.text.lower() == "—Ñ–∞—Ä–º":
            uid = str(message.sender_id)
            check_time = self.check_timer(uid, "—Ñ–∞—Ä–º", 3600)

            boosters = self.db.get("KonataBot", "boosters", {})
            farm_boost = boosters.get("—Ñ–∞—Ä–º", 0)
            boost_active = (t.time() - farm_boost) < 43200 if farm_boost else False
            
            if check_time is not None:
                minutes = check_time // 60
                seconds = check_time % 60
                await message.reply(f"‚ùå –ü–æ–¥–æ–∂–¥–∏ –µ—â–µ <b>{int(minutes)} –º–∏–Ω—É—Ç, {int(seconds)} —Å–µ–∫—É–Ω–¥</b> –ø–µ—Ä–µ–¥ —Ç–µ–º –∫–∞–∫ —Ñ–∞—Ä–º–∏—Ç—å!")
            else:
                stars = r.randint(5, 100)
                if boost_active:
                    stars *= 2 
                    boost_text = " (x2 –±—É—Å—Ç–µ—Ä –∞–∫—Ç–∏–≤–µ–Ω!)"
                else:
                    boost_text = ""
                
                allstars = self.db.get("KonataBot", "stars", {})
                allstars[uid] = allstars.get(uid, 0) + stars
                self.db.set("KonataBot", "stars", allstars)
                
                await message.reply(
                    f"‚≠êÔ∏è –ù–∞—Ñ–∞—Ä–º–ª–µ–Ω–æ <code>{stars}</code> –∑–≤—ë–∑–¥–æ—á–µ–∫!{boost_text}"
                )
            return

        # –±–∞–ª–∞–Ω—Å
        if message.text.lower() in ["–∑–≤—ë–∑–¥–æ—á–µ–∫–∏", "–∑–≤–µ–∑–¥–æ—á–∫–∏", "–∑–≤–µ–∑–¥—ã", "–∑–≤—ë–∑–¥—ã"]:
            uid = str(message.sender_id)
            starss = self.db.get("KonataBot", "stars", {})
            stars = starss.get(uid, 0)
            first_name = await self.get_nick(uid)
            await message.reply(f"üí∞ {first_name}, —É –≤–∞—Å <code>{stars}</code> –∑–≤—ë–∑–¥–æ—á–µ–∫!")
        
        # –Ω–∏–∫–∏
        if message.text.lower().startswith("–Ω–∏–∫–Ω–µ–π–º"):
            args = utils.get_args_raw(message)
            if not args:
                uid = message.sender_id
                nick = await self.get_nick(uid)
                await message.reply(f"üóì –í–∞—à –Ω–∏–∫: {nick}")
                return
            if len(args) > 32:
                await message.reply("‚ùå –í–∞—à –Ω–∏–∫ –Ω–µ –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –±–æ–ª—å—à–µ 32 —Å–∏–º–≤–æ–ª–æ–≤.")
                return
            uid = str(message.sender_id)
            nicks = self.db.get("KonataBot", "nicknames", {})
            nicks[uid] = args
            self.db.set("KonataBot", "nicknames", nicks)
            await message.reply(f"‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–∏–ª–∏ –Ω–∏–∫ –Ω–∞ <code>{args}</code>!")


        # –∫–æ–Ω–∞—Ç–∞
        if message.text.lower() == "–∫–æ–Ω–∞—Ç–∞":
            ping = await self.get_ping()
            await message.reply(f'–Ø ‚Äî <b>–ö–æ–Ω–∞—Ç–∞ –ò–∑—É–º–∏</b>, —Ä–∞–∑–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–π —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç, —Å–æ–∑–¥–∞–Ω–Ω—ã–π —Å –ø–æ–º–æ—â—å—é —é–∑–µ—Ä–±–æ—Ç–∞ ¬´Heroku¬ª.\n–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∫–æ–º–∞–Ω–¥, <b>–≤–≤–µ–¥–∏—Ç–µ "—Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥"</b>.\n\n<b>–ü–∏–Ω–≥:</b> {ping} ms\n<tg-spoiler>–ú–æ–π —Å–æ–∑–¥–∞—Ç–µ–ª—å - @notcuteness –≥–æ–≤–Ω–æ–∫–æ–¥–µ—Ä.</tg-spoiler>')

        # –∫–ª–∞–Ω –æ—Å–Ω–æ–≤–∞—Ç—å
        if message.text.lower().startswith("–æ—Å–Ω–æ–≤–∞—Ç—å –∫–ª–∞–Ω"):
            name = message.text[len("–æ—Å–Ω–æ–≤–∞—Ç—å –∫–ª–∞–Ω"):].strip()
            if len(name) > 16:
                await message.reply("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ –∫–ª–∞–Ω–∞ –Ω–µ –º–æ–∂–µ—Ç —Å–æ–¥–µ—Ä–∂–∞—Ç—å –±–æ–ª—å—à–µ 16 —Å–∏–º–≤–æ–ª–æ–≤.")
                return
            if len(name) == 0:
                await message.reply("‚ùå –ù–∞–∑–≤–∞–Ω–∏–µ –≤–∞—à–µ–≥–æ –∫–ª–∞–Ω–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–Ω—ã–º.")
                return
            uid = message.sender_id
            await self.inline.form(
                "–ß—Ç–æ–±—ã <b>—Å–æ–∑–¥–∞—Ç—å –∫–ª–∞–Ω</b> –≤–∞–º –Ω—É–∂–Ω–æ <code>250</code> <b>–∑–≤—ë–∑–¥–æ—á–µ–∫</b>‚≠êÔ∏è\n–í—ã —É–≤–µ—Ä–µ–Ω—ã?",
                message=message,
                reply_markup=[[
                    {
                        "text": "–î–∞",
                        "callback": self.clan_create,
                        "args": (uid, name, message)
                    },
                    {
                        "text": "–ù–µ—Ç",
                        "callback": self.no_create
                    }
                ]],
                silent=True,
            )

        # –∫–ª–∞–Ω–ª–∏—Å—Ç
        if message.text.lower() == "–∫–ª–∞–Ω–ª–∏—Å—Ç":
            clans = self.db.get("KonataBot", "clans", {})
            if not clans:
                await message.reply("‚ùå –ù–µ—Ç –∫–ª–∞–Ω–æ–≤.")
                return
            
            clan_list = "\n".join([f"{i+1}. {clan}" for i, clan in enumerate(clans.keys())])
            
            await message.reply(f"üìã–°–ø–∏—Å–æ–∫ –∫–ª–∞–Ω–æ–≤:\n{clan_list}")

        # –≤—ã–¥–∞—Ç—å
        if message.text.lower().startswith("–≤—ã–¥–∞—Ç—å –∑–≤–µ–∑–¥—ã"):
            allowed_ids = self.db.get("KonataBot", "admins", [])
            if message.sender_id not in allowed_ids:
                await message.reply("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤!")
                return

            reply = await message.get_reply_message()
            if not reply:
                await message.reply("–ö–æ–º—É —è –¥–æ–ª–∂–µ–Ω –≤—ã–¥–∞–≤–∞—Ç—å?")
                return
            uid = reply.sender_id
            add = message.text[len("–≤—ã–¥–∞—Ç—å –∑–≤–µ–∑–¥—ã"):].strip()
            await self.change_stars(uid, "add", int(add))

            nick = await self.get_nick(reply.sender_id)

            await message.reply(f"‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –≤—ã–¥–∞–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {nick} {add} –∑–≤—ë–∑–¥!")

        # –∑–∞–±—Ä–∞—Ç—å 
        if message.text.lower().startswith("–∑–∞–±—Ä–∞—Ç—å –∑–≤–µ–∑–¥—ã"):
            allowed_ids = self.db.get("KonataBot", "admins", [])

            if message.sender_id not in allowed_ids:
                await message.reply("–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤!")
                return

            reply = await message.get_reply_message()
            if not reply:
                await message.reply("–£ –∫–æ–≥–æ —è –¥–æ–ª–∂–Ω–∞ –∑–∞–±—Ä–∞—Ç—å?")
                return
            uid = reply.sender_id
            take = message.text[len("–∑–∞–±—Ä–∞—Ç—å –∑–≤–µ–∑–¥—ã"):].strip()
            await self.change_stars(uid, "take", int(take))

            nick = await self.get_nick(reply.sender_id)

            await message.reply(f"‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–±—Ä–∞–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {nick} {take} –∑–≤—ë–∑–¥!")

        # —Å—Ç–∞—Ç—å—è
        if message.text.lower() == "—Å—Ç–∞—Ç—å—è":
            if values := self._load_values():
                random_key = r.choice(list(values.keys()))
                random_value = values[random_key]
                uid = message.sender_id
                name1 = await self.get_nick(uid)
                await message.reply(f"ü§∑‚Äç‚ôÇÔ∏è –°–µ–≥–æ–¥–Ω—è {name1} –ø—Ä–∏–≥–æ–≤–∞—Ä–∏–≤–∞–µ—Ç—Å—è –∫ —Å—Ç–∞—Ç—å–µ {random_key}.\n{random_value}")


        # # –∏–∏
        # if message.text.lower().startswith("–∫–æ–Ω–∞—Ç–∞"): 
        #     if message.text.lower() == "–∫–æ–Ω–∞—Ç–∞":
        #         return
        #     question = utils.get_args_raw(message)
        #     answer = await self.ask(question)
        #     await message.reply(answer)

        # —Å–∫–∞–∂–∏
        if message.text.lower().startswith("—Å–∫–∞–∂–∏"):
            say = utils.get_args_raw(message)
            if not say:
                await message.reply("‚ùå –ß—Ç–æ —Å–∫–∞–∑–∞—Ç—å, –¥–æ–ª–±–æ–µ–±?")
                return
            
            await message.reply(say)


        # –∏–Ω–≤–∞–π—Ç –≤ –∫–ª–∞–Ω
        if message.text.lower().startswith("–ø—Ä–∏–≥–ª–∞—Å–∏—Ç—å –≤ –∫–ª–∞–Ω"):
            clan = await self.get_clan(message.sender_id)
            
            reply = await message.get_reply_message()
            # –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ä–µ–ø–ª–∞–π
            if not reply:
                await message.reply("‚ùå –ö–æ–≥–æ –¥–æ–±–∞–≤–ª—è—Ç—å?")
                return
            uid = reply.sender_id
            nick = await self.get_nick(uid)

            # –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ç–æ, —Å–æ—Å—Ç–æ–∏—Ç –ª–∏ –ø—Ä–∏–≥–ª–∞—â–∞—é—â–∏–π –≤ –∫–ª–∞–Ω–µ 
            if not clan:
                await message.reply("‚ùå –í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –∫–ª–∞–Ω–µ. ")
                return
            
            # –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–µ–±—è
            if reply.sender_id == message.sender_id:
                await message.reply("–¢—ã —á–µ –¥–∞—É–Ω —Å–∞–º–æ–≥–æ —Å–µ–±—è –ø—Ä–∏–≥–ª–∞—à–∞—Ç—å?")
                return
                        
            # –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Ç–æ, —Å–æ—Å—Ç–æ–∏—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ –∫–ª–∞–Ω–µ
            ifclan = await self.get_clan(uid)
            if ifclan:
                await message.reply(f"{nick} —É–∂–µ —Å–æ—Å—Ç–æ–∏—Ç –≤ –∫–ª–∞–Ω–µ <code>{ifclan}</code>!")
                return
            
            await self.inline.form(
                f"{nick}, –≤–∞—Å –ø—Ä–∏–≥–ª–∞—à–∞—é—Ç –≤ –∫–ª–∞–Ω {clan}",
                message=message,
                reply_markup=[[
                {
                    "text": "‚úÖ –ü—Ä–∏–Ω—è—Ç—å",
                    "callback": self._accept_clan,
                    "args": (uid, clan),
                    "disable_security": True
                },
                {
                    "text": "‚ùå –û—Ç–∫–ª–æ–Ω–∏—Ç—å",
                    "callback": self._decline_clan,
                    "args": (uid, nick),
                    "disable_security": True
                }
                ]],
                silent=True,
            )

        # –º–æ–π –∫–ª–∞–Ω
        if message.text.lower() == "–∫–ª–∞–Ω":
            uid = message.sender_id
            clan = await self.get_clan(uid)

            if not clan:
                await message.reply("‚ùå –í—ã –Ω–µ —Å–æ—Å—Ç–æ–∏—Ç–µ –≤ –∫–ª–∞–Ω–µ.")
            else:
                clans = self.db.get("KonataBot", "clans", {})
                members = clans.get(clan, [])

                if not members:
                    await message.reply("‚ùå –í –∫–ª–∞–Ω–µ –Ω–µ—Ç —É—á–∞—Å—Ç–Ω–∏–∫–æ–≤.")
                else:
                    member_list = []
                    for index, member_id in enumerate(members, start=1):
                        nick = await self.get_nick(member_id)
                        member_list.append(f"{index}. {nick}")

                    member_text = "\n".join(member_list)
                    await message.reply(f"üè∞ –ö–ª–∞–Ω: <b>{clan}</b>\nüë• –£—á–∞—Å—Ç–Ω–∏–∫–∏:\n{member_text}")

        # # –≤—ã–π—Ç–∏ –Ω–∞—Ö—É–π —Å –∫–ª–∞–Ω–∞
        # if message.text.lower() == "–≤—ã–π—Ç–∏ –∏–∑ –∫–ª–∞–Ω–∞":
        #     uid = message.sender_id
        #     roles = self.db.get("KonataBot", "clan_roles", {})
        #     role = roles[uid]
        #     if role == "owner":
        #         await message.reply('–í—ã –≤–ª–∞–¥–µ–ª–µ—Ü –∫–ª–∞–Ω–∞, –≤—ã –º–æ–∂–µ—Ç–µ —Ç–æ–ª—å–∫–æ —É–¥–∞–ª–∏—Ç—å –µ–≥–æ –∫–æ–º–∞–Ω–¥–æ–π "—É–¥–∞–ª–∏—Ç—å –∫–ª–∞–Ω"')
        #         return
            
        # top stars
        if message.text.lower() in ["—Ç–æ–ø –ø–æ –∑–≤–µ–∑–¥–∞–º", "—Ç–æ–ø –∑–≤–µ–∑–¥", "–∑–≤–µ–∑–¥—ã —Ç–æ–ø"]:
            data = self.db.get("KonataBot", "stars", {})
            top_data = sorted(data.items(), key=lambda x: x[1], reverse=True)[:10]
            if not top_data:
                top_message = "–¢–æ–ø –ø—É—Å—Ç."
            else:
                top_message = ""
                for i, (user_id, stars) in enumerate(top_data, 1):
                    nickname = await self.get_nick(user_id)
                    top_message += f"{i}. {nickname} ‚Äî {stars}\n"
            await message.reply(top_message)
        
        # –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –±—É—Å—Ç–µ—Ä
        if message.text.lower().startswith("–∫—É–ø–∏—Ç—å –±—É—Å—Ç–µ—Ä"):
                
            boost = message.text[len("–∫—É–ø–∏—Ç—å –±—É—Å—Ç–µ—Ä"):].strip().lower()
            if boost != "—Ñ–∞—Ä–º":
                await message.reply("‚ùå –ù–µ—Ç —Ç–∞–∫–æ–≥–æ –±—É—Å—Ç–µ—Ä–∞.")
                return
            uid = message.sender_id
            await self.inline.form(
                f"üîÆ –ö—É–ø–∏—Ç—å –±—É—Å—Ç–µ—Ä <code>{boost}</code> –Ω–∞ 12 —á–∞—Å–æ–≤? (–°—Ç–æ–∏–º–æ—Å—Ç—å: 500‚≠êÔ∏è)",
                message=message,
                reply_markup=[
                    [
                        {
                            "text": "‚úÖ –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å",
                            "callback": self._activate_booster_confirm,
                            "args": (boost, uid,),
                            "disable_security": True
                        },
                        {
                            "text": "‚ùå –û—Ç–º–µ–Ω–∞",
                            "callback": self._activate_booster_cancel,
                            "args": (uid,),
                            "disable_security": True
                        }
                    ]
                ],
                silent=True,
            )
        

        # –±—É—Å—Ç–µ—Ä—ã
        if message.text.lower() == "–±—É—Å—Ç–µ—Ä—ã":
            boosters = self.db.get("KonataBot", "boosters", {})
            current_time = t.time()
            
            expired = []
            for booster, start_time in boosters.items():
                if (current_time - start_time) >= 43200:
                    expired.append(booster)
            
            for booster in expired:
                del boosters[booster]
            
            if expired:
                self.db.set("KonataBot", "boosters", boosters)

            if not boosters:
                await message.reply("<b>üéÆ –ê–∫—Ç–∏–≤–Ω—ã—Ö –±—É—Å—Ç–µ—Ä–æ–≤ –Ω–µ—Ç.</b>")
                return

            boost_list = []
            for booster, start_time in boosters.items():
                time_left = 43200 - (current_time - start_time)
                if time_left <= 0:
                    continue
                
                hours = int(time_left // 3600)
                minutes = int((time_left % 3600) // 60)
                boost_list.append(
                    f"‚ñ´Ô∏è <code>{booster}</code> | –û—Å—Ç–∞–ª–æ—Å—å: {hours}—á {minutes}–º"
                )

            await message.reply(
                "üöÄ <b>–ê–∫—Ç–∏–≤–Ω—ã–µ –±—É—Å—Ç–µ—Ä—ã:</b>\n\n" + "\n".join(boost_list)
            )


        # —Å–ø–∏–∑–¥–∏—Ç—å –∑–≤–µ–∑–¥—ã
        if message.text.lower() in ["—Å–ø–∏–∑–¥–∏—Ç—å –∑–≤–µ–∑–¥—ã", "—Å–≤–æ—Ä–æ–≤–∞—Ç—å –∑–≤–µ–∑–¥—ã"]:

            reply = await message.get_reply_message()
            uid = message.sender_id
            if not reply:
                await message.reply("–û—Ç–≤–µ—Ç—å –Ω–∞ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
                return
            ctime = self.check_timer(uid, "—Å–ø–∏–∑–¥–∏—Ç—å –∑–≤–µ–∑–¥—ã", 360)
            rid = reply.sender_id
            nic = await self.get_nick(rid)
            if ctime is not None:
                minutes = ctime // 60
                seconds = ctime % 60
                await message.reply(f"‚ùå –ü–æ–¥–æ–∂–¥–∏ –µ—â–µ <b>{int(minutes)} –º–∏–Ω—É—Ç, {int(seconds)} —Å–µ–∫—É–Ω–¥</b> –ø–µ—Ä–µ–¥ —Ç–µ–º –∫–∞–∫ –≤–æ—Ä–æ–≤–∞—Ç—å!")
            else:
                if r.random() < 0.1:
                    val = r.randint(1, 50)
                    await self.change_stars(rid, "take", val)
                    await message.reply(f"‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ —Å–ø–∏–∑–¥–∏–ª–∏ <code>{val}</code> –∑–≤—ë–∑–¥–æ—á–µ–∫ —É {nic}")
                else:
                    await message.reply(f"‚ùå –£–≤—ã, –Ω–æ —É –≤–∞—Å –Ω–µ –ø–æ–ª—É—á–∏–ª–æ—Å—å —Å–ø–∏–∑–¥–∏—Ç—å –∑–≤–µ–∑–¥—ã —É {nic}. –í–∞—Å –ø–æ–π–º–∞–ª–∏, –≤–∞–º —à—Ç—Ä–∞—Ñ -25 –∑–≤—ë–∑–¥–æ—á–µ–∫.")
                    await self.change_stars(uid, "take", 25)

        # –ø—Ä–æ—Ñ–∏–ª—å
        if message.text.lower() == "–∫–æ–Ω–∞—Ç–∞ –ø—Ä–æ—Ñ–∏–ª—å":
            uid = message.sender_id
            alstars = self.db.get("KonataBot", "stars", {})
            nick = await self.get_nick(uid)
            stars = alstars[str(uid)]
            clan = await self.get_clan(uid)
            clan = clan if clan else "–ù–µ—Ç—É"


            await message.reply(f'üë§ <b>–≠—Ç–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å</b> {nick}\n‚≠êÔ∏è <b>–ë–∞–ª–∞–Ω—Å –∑–≤—ë–∑–¥:</b> {stars}\nüè∞ <b>–ö–ª–∞–Ω:</b> {clan}')

        


        # –ø–µ—Ä–µ–¥–∞—á–∞ –∑–≤—ë–∑–¥
        if message.text.lower().startswith("–ø–µ—Ä–µ–¥–∞—Ç—å –∑–≤–µ–∑–¥—ã"):
            uid = message.sender_id
            reply = await message.get_reply_message()
            if not reply:
                await message.reply("–ö–æ–º—É –ø–µ—Ä–µ–¥–∞—Ç—å?")
                return
            rid = reply.sender_id
            amount = message.text[len("–ø–µ—Ä–µ–¥–∞—Ç—å –∑–≤–µ–∑–¥—ã"):].strip()
            try:
                amount = int(amount)
            except (TypeError, ValueError):
                await message.reply("–£–∫–∞–∂–∏—Ç–µ –≤–µ—Ä–Ω—É—é —Å—É–º–º—É")
                return
            if not await self.change_stars(uid, "take", amount):
                await message.reply("–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –∑–≤—ë–∑–¥–æ—á–µ–∫.")
                return
            await self.change_stars(rid, "add", amount)
            nick = await self.get_nick(rid)
            await message.reply(f"–í—ã —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ–¥–∞–ª–∏ <code>{amount}</code> –∑–≤—ë–∑–¥–æ—á–µ–∫ ‚≠êÔ∏è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {nick}")